#!/bin/bash

# archy: Architecture documentation generator
# Usage: 
#   archy fresh [-p project] [-f folder] [-d doc] [-n name] [-t tool]   - Create fresh architecture doc
#   archy update [-p project] [-f folder] [-d doc] [-t tool]           - Update from git changes
#   archy [file]                                              - Treat first arg as filename for update

set -euo pipefail

# Find the actual arch.sh script (resolve symlinks)
if [ -L "$0" ]; then
    # Follow symlink to get actual script location
    REAL_SCRIPT="$(readlink "$0")"
    if [[ "$REAL_SCRIPT" = /* ]]; then
        # Absolute path
        SCRIPT_DIR="$(dirname "$REAL_SCRIPT")"
    else
        # Relative path
        SCRIPT_DIR="$(cd "$(dirname "$0")" && cd "$(dirname "$REAL_SCRIPT")" && pwd)"
    fi
else
    # Not a symlink
    SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
fi
ARCH_SCRIPT="$SCRIPT_DIR/arch.sh"

if [ ! -f "$ARCH_SCRIPT" ]; then
    echo "‚ùå Cannot find arch.sh script."
    exit 1
fi

# Security Functions (lightweight versions)
validate_path_basic() {
    local path="$1"
    # Check for directory traversal attempts
    if [[ "$path" =~ \.\./|\.\.\\ ]] || [[ "$path" =~ /\.\./|/\.\.\\ ]]; then
        echo "‚ùå ERROR: Path traversal detected: $path" >&2
        exit 1
    fi
}

validate_filename_basic() {
    local filename="$1"
    # Only allow safe filename characters
    if [[ ! "$filename" =~ ^[a-zA-Z0-9._-]+$ ]]; then
        echo "‚ùå ERROR: Invalid characters in filename: $filename" >&2
        exit 1
    fi
}

validate_backend() {
    local backend="$1"
    case "$backend" in
        "cursor-agent"|"fabric"|"cursor") ;;
        *)
            echo "‚ùå ERROR: Invalid AI backend '$backend'. Supported: cursor-agent, fabric" >&2
            exit 1
            ;;
    esac
}

# Parse command and flags

parse_flags() {
    local mode="$1"
    shift
    
    # Default values
    PROJECT_PATH="."
    SUBFOLDER=""
    ARCH_FILE="arch.md"
    PROJECT_NAME=""
    AI_TOOL=""
    
    # Parse flags
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--project)
                PROJECT_PATH="$2"
                shift 2
                ;;
            -f|--folder)
                SUBFOLDER="$2"
                shift 2
                ;;
            -d|--doc)
                ARCH_FILE="$2"
                shift 2
                ;;
            -n|--name)
                PROJECT_NAME="$2"
                shift 2
                ;;
            -t|--tool)
                AI_TOOL="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo "‚ùå Unknown flag: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Security validations
    validate_path_basic "$PROJECT_PATH"
    if [ -n "$SUBFOLDER" ]; then
        validate_path_basic "$SUBFOLDER"
    fi
    validate_filename_basic "$ARCH_FILE"
    if [ -n "$AI_TOOL" ]; then
        validate_backend "$AI_TOOL"
        export ARCHY_AI_BACKEND="$AI_TOOL"
    fi
    
    # Execute the command
    if [ "$mode" = "fresh" ]; then
        echo "üèóÔ∏è  Creating fresh architecture documentation..."
        echo "   Project: $PROJECT_PATH"
        echo "   Folder: ${SUBFOLDER:-"(root)"}"
        echo "   Output: $ARCH_FILE"
        echo "   Name: ${PROJECT_NAME:-"(auto-detect)"}"
        echo "   AI Backend: ${AI_TOOL:-"${ARCHY_AI_BACKEND:-cursor-agent}"}"
        
        if [ -n "$PROJECT_NAME" ]; then
            exec "$ARCH_SCRIPT" --fresh "$PROJECT_PATH" "$SUBFOLDER" "$ARCH_FILE" "$PROJECT_NAME"
        else
            exec "$ARCH_SCRIPT" --fresh "$PROJECT_PATH" "$SUBFOLDER" "$ARCH_FILE"
        fi
    else
        echo "üîÑ Updating architecture documentation..."
        echo "   Project: $PROJECT_PATH"
        echo "   Folder: ${SUBFOLDER:-"(root)"}"
        echo "   File: $ARCH_FILE"
        echo "   AI Backend: ${AI_TOOL:-"${ARCHY_AI_BACKEND:-cursor-agent}"}"
        
        exec "$ARCH_SCRIPT" "$PROJECT_PATH" "$SUBFOLDER" "$ARCH_FILE"
    fi
}

# Test AI backend function with provider selection
test_ai_backend() {
    local provider=""
    local test_message=""
    
    # Parse flags for test command
    while [[ $# -gt 0 ]]; do
        case $1 in
            -t|--tool)
                provider="$2"
                shift 2
                ;;
            *)
                test_message="$1"
                shift
                ;;
        esac
    done
    
    # Set provider environment variable if specified
    if [ -n "$provider" ]; then
        validate_backend "$provider"
        export ARCHY_AI_BACKEND="$provider"
    fi
    
    # Call the test script
    if [ -n "$test_message" ]; then
        "$SCRIPT_DIR/test_ai_backend.sh" "$test_message"
    else
        "$SCRIPT_DIR/test_ai_backend.sh"
    fi
}

show_help() {
    echo "archy: üèõÔ∏è Architecture documentation generator using AI backends (cursor-agent, fabric) üèõÔ∏è"
    echo ""
    echo "Usage:"
    echo "  archy fresh [-p project] [-f folder] [-d doc] [-n name] [-t tool]"
    echo "  archy update [-p project] [-f folder] [-d doc] [-t tool]"
    echo "  archy test [-t tool] [message]      # Test AI backend (cursor-agent|fabric)"
    echo "  archy [filename]                    # Legacy: treat as update with filename"
    echo ""
    echo "Flags:"
    echo "  -p, --project PATH    Git project path (for fresh/update commands)"
    echo "  -t, --tool NAME       AI tool (cursor-agent|fabric)"
    echo "  -f, --folder PATH     Subfolder to focus on (optional)"
    echo "  -d, --doc FILE        Documentation filename (default: arch.md)"
    echo "  -n, --name NAME       Project name (default: auto-detect from folder)"
    echo "  -h, --help            Show this help"
    echo ""
    echo "Examples:"
    echo "  archy test                               # Test cursor-agent (default)"
    echo "  archy test -t fabric                     # Test fabric backend"
    echo "  archy test -t cursor \"Custom message\"    # Test cursor-agent with custom message"
    echo "  archy fresh                              # Create arch.md in current dir"
    echo "  archy fresh -t fabric                    # Create with fabric backend"
    echo "  archy fresh -f backend -d api.md         # Focus on backend/, output to api.md"
    echo "  archy fresh -p /path/to/repo -n MyApp -t fabric  # Different project with fabric"
    echo "  archy update -f frontend                 # Update focusing on frontend/"
    echo "  archy update -t fabric                   # Update with fabric backend"
    echo "  archy update -p ../other-repo -t cursor  # Update different project with cursor-agent"
    echo ""
    echo "Environment variables (for fresh/update commands):"
    echo "  ARCHY_AI_BACKEND=cursor-agent            # Use cursor-agent (default)"
    echo "  ARCHY_AI_BACKEND=fabric                  # Use fabric (supports local models)"
    echo ""
    echo "Legacy compatibility:"
    echo "  archy some-file.md                       # Treats as: archy update -d some-file.md"
}

# Main command dispatch
CMD="${1:-help}"

case "$CMD" in
    "fresh"|"create"|"new"|"--fresh")
        shift
        parse_flags "fresh" "$@"
        ;;
    "update"|"--update")
        shift
        parse_flags "update" "$@"
        ;;
    "test"|"--test")
        shift
        test_ai_backend "$@"
        ;;
    "-h"|"--help"|"help")
        show_help
        ;;
    *)
        # Legacy mode: treat first arg as filename
        if [[ "$CMD" =~ \.(md|txt|rst)$ ]] || [[ "$CMD" == *"arch"* ]]; then
            echo "üîÑ Updating architecture documentation (legacy mode)..."
            echo "   Directory: $(pwd)"
            echo "   File: $CMD"
            exec "$ARCH_SCRIPT" . "" "$CMD"
        else
            echo "‚ùå Unknown command: $CMD"
            echo ""
            show_help
            exit 1
        fi
        ;;
esac
